# Sample ResourceBundle properties file
server.help = Usage: java org.hsqldb.Server [options]\n\
\n\
+----------------+-------------+----------+------------------------------+\n\
|    OPTION      |    TYPE     | DEFAULT  |         DESCRIPTION          |\n\
+----------------+-------------+----------+------------------------------|\n\
| -?             | --          | --       | prints this message          |\n\
| -address       | name|number | any      | server inet address          |\n\
| -port          | number      | 9001/544 | port at which server listens |\n\
| -database.i    | [type]spec  | 0=test   | name of database i           |\n\
| -dbname.i      | alias       | --       | url alias for database i     |\n\
| -silent        | true|false  | true     | false => display all queries |\n\
| -trace         | true|false  | false    | display JDBC trace messages  |\n\
| -tls           | true|false  | false    | TLS/SSL (secure) sockets     |\n\
| -no_system_exit| true|false  | false    | do not issue System.exit()   |\n\
+----------------+-------------+----------+------------------------------+\n\
\n\
The server looks for a 'server.properties' file in the current directory and\n\
loads properties from it if it exists. \n\
\n\
Here is an example 'server.properties' file:\n\
\n\
server.port=1234\n\
#mounts a file-based (persistent) database with alias 'filetest'\n\
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/filetest'\n\
#but '/filetest' can be omitted because database.0 is the default\n\
server.database.0=file:/mydatbasedir/test\n\
server.dbname.0=filetest\n\
#mounts a 'file_in_jar' database with alias 'restest'\n\
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/restest'\n\
server.database.1=res:/mypackage/test\n\
server.dbname.1=restest\n\
#mounts a 100% in-memory (transient) database with alias 'memtest'\n\
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/memtest'\n\
server.database.2=mem:test\n\
server.dbname.2=memtest\n\
...\n\
server.database.n=...\n\
server.dbname.n=...\n\
server.silent=true\n\
\n\
#end of 'server.properties' file\n\
\n\
Command line options override those loaded from the 'server.properties' file.\n\
\n\
The default port is 9001 if tls is false and 544 if it is true.\n\
When omitted, the value of tls is true iff the system property:\n\
\n\
    \tjavax.net.ssl.keyStore\n\
\n\
is defined. An example command line invocation requesting TLS might look like:\n\
\n\
    \tjava -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.Server [options]\n\
\n\
For information on secure sockets, see: http://java.sun.com/products/jsse/
webserver.help= Usage: java org.hsqldb.WebServer [options]\n\
\n\
+----------------+------------ +------------+------------------------------+\n\
|    OPTION      |    TYPE     |  DEFAULT   |         DESCRIPTION          |\n\
+----------------+-------------+------------+------------------------------|\n\
| -?             | --          | --         | prints this message          |\n\
| -address       | name|number | any        | server inet address          |\n\
| -port          | number      | 80/443     | port at which server listens |\n\
| -database.i    | [type]spec  | 0=test     | name of database i           |\n\
| -dbname.i      | alias       | --         | url alias for database i     |\n\
| -root          | path        | ./         | path to web root             |\n\
| -default_page  | file        | index.html | default web page             |\n\
| -silent        | true|false  | true       | false => display all queries |\n\
| -trace         | true|false  | false      | display JDBC trace messages  |\n\
| -tls           | true|false  |            | HTTPS (secure) sockets       |\n\
| -no_system_exit| true|false  | false      | do not issue System.exit()   |\n\
+----------------+-------------+------------+------------------------------+\n\
\n\
The web server looks for a 'webserver.properties' file in the current directory and\n\
loads properties from it if it exists. \n\
\n\
Here is an example 'webserver.properties' file:\n\
\n\
server.port=8080\n\
#mounts a file-based (persistent) database with alias 'filetest'\n\
#database connection url would be 'jdbc:hsqldb:http://host:8080/filetest'\n\
#but the alias 'filetest' can be omitted because database.0 is the default\n\
server.database.0=file:/mydatabasedir/test\n\
server.dbname.0=filetest\n\
#mounts a 'file_in_jar' database with alias 'restest'\n\
#database connection url would be 'jdbc:hsqldb:http://host:8080/restest'\n\
server.database.1=res:/maypackage/test\n\
server.dbname.1=restest\n\
#mounts a 100% in-memory (transient) database with alias 'memtest'\n\
#database connection url would be 'jdbc:hsqldb:http://host:8080/memtest'\n\
server.database.2=mem:test\n\
server.dbname.2=memtest\n\
...\n\
server.database.n=...\n\
server.dbname.n=...\n\
server.silent=true\n\
\n\
#user-defined mime type mappings\n\
#must start with '.' and be in lower case\n\
\n\
.htm=text/html\n\
.html=text/html\n\
.txt=text/plain\n\
.gif=image/gif\n\
.class=application/octet-stream\n\
.jpg=image/jpeg\n\
.jgep=image/jpeg\n\
.zip=application/x-zip-compressed\n\
\n\
#end of 'weserver.properties' file\n\
\n\
Command line options override those loaded from the 'webserver.properties' file.\n\
\n\
The default port is 80 if tls is false and 433 if it is true.\n\
When omitted, the value of tls is true iff the system property:\n\
\n\
    \tjavax.net.ssl.keyStore\n\
\n\
is defined. An example command line invocation requesting TLS might look like:\n\
\n\
    \tjava -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.WebServer [options]\n\
\n\
For information on secure sockets, see: http://java.sun.com/products/jsse/
online.help=To close normally, connect and execute SHUTDOWN SQL\n\
From command line, use [Ctrl]+[C] to abort abruptly
